#include "random.ceu"

emit FRAMES_SET(yes);

event int collision;
event int game_over;

code/call Intersects (var& Rect rect1, var& Rect rect2) -> yes/no do
    escape rect1.x+rect1.w/2 >= rect2.x-rect2.w/2 and
           rect1.x-rect1.w/2 <= rect2.x+rect2.w/2 and
           rect1.y+rect1.h/2 >= rect2.y-rect2.h/2 and
           rect1.y-rect1.h/2 <= rect2.y+rect2.h/2;
end

code/await Player(var int id, var int up, var int right, var int down, var int left, var Color color) -> (var Rect rect) -> none do
    rect = val Rect(0,0,4,5); //x,y,w,h
    var int playerFrame = 0;
    var int score = 0;
    var int x_axis = 0;
    var int y_axis = 0;

    par/or do
        var int key;
        every key in KEY_PRESS do
            //atualiza x_axis e y_axis com 1 ou -1
            if (key == left) then
                x_axis = -1;
            else/if (key == right) then
                x_axis = 1;
            else/if (key == up) then
                y_axis = 1;
            else/if (key == down) then
                y_axis = -1;
            end 
        end
    with
        var int key;
        every key in KEY_UNPRESS do
            //atualiza x_axis e y_axis com 0
            if (key == left) or (key == right) then
                x_axis = 0;
            else/if (key == up) or (key == down) then
                y_axis = 0;
            end 
        end        
    with
        every FRAMES_UPDATE do
            //atualiza pt com base em x_axis e y_axis
            if (x_axis == 1) and (rect.x < 25) then
                rect.x = rect.x + 1;
                playerFrame = 1;
            else/if (x_axis == -1) and (rect.x > -25) then
                rect.x = rect.x - 1;
                playerFrame = 2;
            end

            if (y_axis == 1) and (rect.y < 25) then
                rect.y = rect.y + 1;
                playerFrame = 3;
            else/if (y_axis == -1) and (rect.y > -25) then
                rect.y = rect.y - 1;
                playerFrame = 0;
            end
        end
    with
        every FRAMES_REDRAW do
            // desenha bmp
            emit GRAPHICS_SET_BMP_FRAME(playerFrame, 4);
            emit GRAPHICS_SET_SCALE(0.3, 0.3);
            if (id == 1) then
                emit GRAPHICS_DRAW_BMP(rect.x, rect.y, "res/player1.bmp");            
            else
                emit GRAPHICS_DRAW_BMP(rect.x, rect.y, "res/player2.bmp");    
            end

            //desenha score
            emit GRAPHICS_SET_SCALE(1.0,1.0);
            emit GRAPHICS_SET_COLOR_NAME(color);
            if (id == 1) then
                emit GRAPHICS_DRAW_INT(-21,21,score);
            else
                emit GRAPHICS_DRAW_INT(23,21,score);
            end            

            //desenha rect
            emit GRAPHICS_DRAW_RECT(rect.x, rect.y, rect.w, rect.h); //x,y,w,h
            emit GRAPHICS_SET_COLOR_NAME(COLOR_WHITE);
            emit GRAPHICS_DRAW_PIXEL(rect.x, rect.y);
        end
    with
        loop do
            var int r_id = await outer.collision until r_id == id;
            score = score+1;
            _printf("%d - score %d\n", id, score);
            if (score==3) then
                emit outer.game_over(id);
            end
        end
    with
        await outer.game_over;
    end
end

code/await Coin (none) -> (var Rect rect, event none collision) -> none do
    var Point pt = call Random_Point_In_Square(-25,-25,25,17);
    rect = val Rect(pt.x, pt.y, 2, 2);

    var int coinFrame = 0;
    par/or do
        every 50ms do
            coinFrame = (coinFrame + 1) % 9;
        end
    with
        every FRAMES_REDRAW do
            //desenha bmp
            emit GRAPHICS_SET_BMP_FRAME(coinFrame, 9);
            emit GRAPHICS_SET_SCALE(0.2,0.2);
            emit GRAPHICS_DRAW_BMP(pt.x, pt.y, "res/coin.bmp");

            //desenha rect
            emit GRAPHICS_SET_SCALE(1.0, 1.0);
            emit GRAPHICS_SET_COLOR_NAME(COLOR_RED);
            emit GRAPHICS_DRAW_RECT(rect.x, rect.y, rect.w, rect.h);
            emit GRAPHICS_SET_COLOR_NAME(COLOR_WHITE);
            emit GRAPHICS_DRAW_PIXEL(rect.x, rect.y);
        end
    with
        await MOUSE_CLICK;
    with
        await collision;
    with
        await outer.game_over;
    end
end

pool[5] Coin coins;
pool[2] Player players;
spawn Player(1, KEY_UP, KEY_RIGHT, KEY_DOWN, KEY_LEFT, COLOR_BLUE) in players;
spawn Player(2, KEY_w , KEY_d    , KEY_s   , KEY_a   , COLOR_RED) in players;

var int winner;

par/or do
    every 1s do
        spawn Coin() in coins;
    end
with
// Aqui vamos tratar a colisão
every FRAMES_UPDATE do
    var&? Player player;
    loop player in players do
        var&? Coin coin;
        loop coin in coins do
            // verifico a colisão e tomo uma ação
            if (call Intersects(&player!.rect,&coin!.rect)) then
                emit coin!.collision();
                emit collision(player!.id);
            end
        end
    end
end
with
    winner = await game_over;
end

emit GRAPHICS_SET_COLOR_NAME(COLOR_WHITE);
every FRAMES_REDRAW do
    emit GRAPHICS_DRAW_INT(0,10,winner);
    emit GRAPHICS_DRAW_TEXT(0,0,"Fim");
end

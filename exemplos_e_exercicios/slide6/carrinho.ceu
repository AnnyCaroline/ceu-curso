#include "random.ceu"

#define WINDOW_W 10
#define WINDOW_H 10
#define SPEED 150

// output (yes/no) WINDOW_SET_GRID

emit WINDOW_SET_SIZE(315,315,21,21);
emit WINDOW_SET_GRID(no);

emit FRAMES_SET(yes);

code/await Car (var Point pt, var Color color) -> NEVER do
    par do
        var int key;
        every key in KEY_PRESS do
            if key==KEY_RIGHT and pt.x < (WINDOW_W-5) then
                pt.x = pt.x + 1;
            else/if key==KEY_LEFT and pt.x > (-WINDOW_W+5) then
                pt.x = pt.x - 1;
            end
        end
    with
        every FRAMES_REDRAW do
            emit GRAPHICS_SET_COLOR_NAME(color);
            emit GRAPHICS_DRAW_PIXEL(pt.x, pt.y);
            emit GRAPHICS_DRAW_PIXEL(pt.x, pt.y+1);
            emit GRAPHICS_DRAW_PIXEL(pt.x-1, pt.y);
            emit GRAPHICS_DRAW_PIXEL(pt.x+1, pt.y);
            emit GRAPHICS_DRAW_PIXEL(pt.x, pt.y-1);
            emit GRAPHICS_DRAW_PIXEL(pt.x-1, pt.y-2);
            emit GRAPHICS_DRAW_PIXEL(pt.x+1, pt.y-2);
        end
    end
end

code/await Obstacles (var Color color) -> NEVER do
    var Point pt = val Point(call Random_Int(-WINDOW_W+4,WINDOW_W-4), WINDOW_H);
    par do
        every (SPEED)ms do
            pt.y = pt.y-1;
        end
    with
        every FRAMES_REDRAW do
            emit GRAPHICS_SET_COLOR_NAME(color);
            emit GRAPHICS_DRAW_PIXEL(pt.x, pt.y);
        end
    end
end

code/await DashedLine(var int x, var int top, var Color color1, var Color color2, var int size) -> none do
    var int i;
    emit GRAPHICS_SET_COLOR_NAME(color1);
    loop i in [top->WINDOW_H],(size*2) do
        emit GRAPHICS_DRAW_RECT(x, i, 1, size);
    end
    emit GRAPHICS_SET_COLOR_NAME(color2);
    loop i in [top+size->WINDOW_H],(size*2) do
        emit GRAPHICS_DRAW_RECT(x, i, 1, size);
    end
end


code/await StreetLine(var int top) -> NEVER do
    var int x=0;
    var int y=top;

    par do
        every (SPEED)ms do
            y = y-1;
            if (y==-WINDOW_H-2) then
                y=WINDOW_H;
            end
        end
    with
        every FRAMES_REDRAW do
            emit GRAPHICS_SET_COLOR_NAME(COLOR_YELLOW);
            emit GRAPHICS_DRAW_RECT(x,y,1,2);
        end
    end
end

par do
    pool[] StreetLine streetLines;
    spawn StreetLine(WINDOW_H) in streetLines;
    spawn StreetLine(WINDOW_H-8) in streetLines;
    spawn StreetLine(WINDOW_H-16) in streetLines;
    await FOREVER;
with
    every FRAMES_REDRAW do

        emit GRAPHICS_SET_ANCHOR(HANCHOR_LEFT, VANCHOR_TOP);
        emit GRAPHICS_SET_COLOR_NAME(COLOR_GREEN);
        emit GRAPHICS_DRAW_RECT(-WINDOW_W,WINDOW_H,3,WINDOW_H*2+1);
        await DashedLine(-WINDOW_W+3, -WINDOW_H, COLOR_WHITE, COLOR_GRAY,1);
        
        emit GRAPHICS_SET_ANCHOR(HANCHOR_RIGHT, VANCHOR_TOP);
        emit GRAPHICS_SET_COLOR_NAME(COLOR_GREEN);
        emit GRAPHICS_DRAW_RECT(WINDOW_W,WINDOW_H,3,WINDOW_H*2+1);
        await DashedLine(WINDOW_W-3, -WINDOW_H, COLOR_WHITE, COLOR_GRAY,1);
        
        emit GRAPHICS_SET_ANCHOR(HANCHOR_CENTER, VANCHOR_CENTER);
    end
with
    pool[] Obstacles obstacles;
    every 1s do
        spawn Obstacles(COLOR_RED) in obstacles;
    end
with
    var Point pt = val Point(0,-WINDOW_H+3);
    await Car(pt, COLOR_AQUA);
end